(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{211:function(e,t,a){"use strict";a.r(t);var s=a(0),r=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"request-parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#request-parameters"}},[e._v("#")]),e._v(" Request Parameters")]),e._v(" "),a("p",[e._v("After you've created a "),a("code",[e._v("RestRequest")]),e._v(", you can add parameters to it.\nHere is a Description of the 5 currently supported types and their behavior when using the default IHttp implementation.")]),e._v(" "),a("h2",{attrs:{id:"cookie"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cookie"}},[e._v("#")]),e._v(" Cookie")]),e._v(" "),a("p",[e._v("Adds the parameter to the list of cookies that are sent along with the request. The cookie name is the name of the parameter and the value is the "),a("code",[e._v("Value.ToString()")]),e._v(" you passed in.")]),e._v(" "),a("h2",{attrs:{id:"http-header"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#http-header"}},[e._v("#")]),e._v(" Http Header")]),e._v(" "),a("p",[e._v("Adds the parameter as an HTTP header that is sent along with the request. The header name is the name of the parameter and the header value is the value.")]),e._v(" "),a("p",[e._v("Note that there are some restricted headers that may behave differently or that are simply ignored. Please look at the "),a("code",[e._v("_restrictedHeaderActions")]),e._v(" dictionary in "),a("code",[e._v("Http.cs")]),e._v(" to see which headers are special and how they behave.")]),e._v(" "),a("h2",{attrs:{id:"get-or-post"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#get-or-post"}},[e._v("#")]),e._v(" Get or Post")]),e._v(" "),a("p",[e._v("This behaves differently based on the method. If you execute a GET call, RestSharp will append the parameters to the Url in the form "),a("code",[e._v("url?name1=value1&name2=value2")]),e._v(".")]),e._v(" "),a("p",[e._v("On a POST or PUT Requests, it depends on whether or not you have files attached to a Request.\nIf not, the Parameters will be sent as the body of the request in the form "),a("code",[e._v("name1=value1&name2=value2")]),e._v(". Also, the request will be sent as "),a("code",[e._v("application/x-www-form-urlencoded")]),e._v(".")]),e._v(" "),a("p",[e._v("In both cases, name and value will automatically be url-encoded.")]),e._v(" "),a("p",[e._v("If you have files, RestSharp will send a "),a("code",[e._v("multipart/form-data")]),e._v(" request. Your parameters will be part of this request in the form:")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Content-Disposition: form-data; name="parameterName"\n\nParameterValue\n')])])]),a("h2",{attrs:{id:"url-segment"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#url-segment"}},[e._v("#")]),e._v(" Url Segment")]),e._v(" "),a("p",[e._v("Unlike "),a("code",[e._v("GetOrPost")]),e._v(", this "),a("code",[e._v("ParameterType")]),e._v(" replaces placeholder values in the "),a("code",[e._v("RequestUrl")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" request "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("RestRequest")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"health/{entity}/status"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("AddParameter")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"entity"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"s2"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" ParameterType"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("UrlSegment"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("p",[e._v("When the request executes, RestSharp will try to match any "),a("code",[e._v("{placeholder}")]),e._v(" with a parameter of that name (without the "),a("code",[e._v("{}")]),e._v(") and replace it with the value. So the above code results in "),a("code",[e._v("health/s2/status")]),e._v(" being the url.")]),e._v(" "),a("h2",{attrs:{id:"request-body"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#request-body"}},[e._v("#")]),e._v(" Request Body")]),e._v(" "),a("p",[e._v("If this parameter is set, its value will be sent as the body of the request. "),a("em",[e._v("Only one")]),e._v(" "),a("code",[e._v("RequestBody")]),e._v(" parameter is accepted - the first one.")]),e._v(" "),a("p",[e._v("The name of the parameter will be used as the "),a("code",[e._v("Content-Type")]),e._v(" header for the request.")]),e._v(" "),a("p",[a("code",[e._v("RequestBody")]),e._v(" does not work on GET or HEAD Requests, as they do not actually send a body.")]),e._v(" "),a("p",[e._v("If you have "),a("code",[e._v("GetOrPost")]),e._v(" parameters as well, they will overwrite the "),a("code",[e._v("RequestBody")]),e._v(" - RestSharp will not combine them but it will instead throw the "),a("code",[e._v("RequestBody")]),e._v(" parameter away.")]),e._v(" "),a("p",[e._v("It is recommended to use "),a("code",[e._v("AddJsonBody")]),e._v(" or "),a("code",[e._v("AddXmlBody")]),e._v(" methods instead of "),a("code",[e._v("AddParameter")]),e._v(" with type "),a("code",[e._v("BodyParameter")]),e._v(". Those methods will set the proper request type and do the serialization work for you.")]),e._v(" "),a("h3",{attrs:{id:"addjsonbody"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addjsonbody"}},[e._v("#")]),e._v(" AddJsonBody")]),e._v(" "),a("p",[e._v("When you call "),a("code",[e._v("AddJsonBody")]),e._v(", it does the following for you:")]),e._v(" "),a("ul",[a("li",[e._v("Instructs the RestClient to serialize the object parameter as JSON when making a request")]),e._v(" "),a("li",[e._v("Sets the content type to "),a("code",[e._v("application/json")])]),e._v(" "),a("li",[e._v("Sets the internal data type of the request body to "),a("code",[e._v("DataType.Json")])])]),e._v(" "),a("p",[e._v("Do not set content type headers or send JSON string or some sort of "),a("code",[e._v("JObject")]),e._v(" instance to "),a("code",[e._v("AddJsonBody")]),e._v(", it won't work!")]),e._v(" "),a("p",[e._v("Here is the example:")]),e._v(" "),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("var")]),e._v(" param "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("new")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("MyClass")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" IntData "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" StringData "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[e._v('"test123"')]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\nrequest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("AddJsonBody")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("param"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])])]),a("h3",{attrs:{id:"addxmlbody"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#addxmlbody"}},[e._v("#")]),e._v(" AddXmlBody")]),e._v(" "),a("p",[e._v("When you call "),a("code",[e._v("AddXmlBody")]),e._v(", it does the following for you:")]),e._v(" "),a("ul",[a("li",[e._v("Instructs the RestClient to serialize the object parameter as XML when making a request")]),e._v(" "),a("li",[e._v("Sets the content type to "),a("code",[e._v("application/xml")])]),e._v(" "),a("li",[e._v("Sets the internal data type of the request body to "),a("code",[e._v("DataType.Xml")])])]),e._v(" "),a("p",[e._v("Do not set content type headers or send XML string to "),a("code",[e._v("AddXmlBody")]),e._v(", it won't work!")]),e._v(" "),a("h2",{attrs:{id:"query-string"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query-string"}},[e._v("#")]),e._v(" Query String")]),e._v(" "),a("p",[e._v("This works like "),a("code",[e._v("GetOrPost")]),e._v(", except that it always appends the parameters to the url in the form "),a("code",[e._v("url?name1=value1&name2=value2")]),e._v(", regardless of the request method.")])])}),[],!1,null,null,null);t.default=r.exports}}]);